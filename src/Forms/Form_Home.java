/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Forms;

import entity.Recent_goal_entity;
import entity.Top_Salary_entity;
import entity.coach_entity;
import entity.staff_entity;
import java.awt.Color;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import model.Model_card;
import model.StatusType;
import sqlConnection.SQLcon;
import swing.ScrollBar;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author mohaned
 */
public class Form_Home extends javax.swing.JPanel {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    public Form_Home() {
        initComponents();
        conn = SQLcon.connecrb();
        card1.setData(new Model_card(new ImageIcon(getClass().getResource("/icons/2.png")), "Number of Players", ""+no_of_player(), ""));
        card2.setData(new Model_card(new ImageIcon(getClass().getResource("/icons/profit.png")), "Total Salary", "$"+total_salary(), ""));
        card3.setData(new Model_card(new ImageIcon(getClass().getResource("/icons/5.png")), "Number of Remaining Match", ""+Remaining_match(), "Out of 38 match"));
        show_Top_salary();
        show_Recent_goal();
        // add table row
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        card1 = new componant.Card();
        card2 = new componant.Card();
        card3 = new componant.Card();
        header1 = new componant.Header();
        jScrollPane2 = new javax.swing.JScrollPane();
        Topsalary = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Recentgoals = new javax.swing.JTable();

        jLayeredPane1.setLayout(new java.awt.GridLayout(1, 0, 10, 0));
        jLayeredPane1.add(card1);
        jLayeredPane1.add(card2);
        jLayeredPane1.add(card3);

        Topsalary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Player Name", "Salary"
            }
        ));
        jScrollPane2.setViewportView(Topsalary);

        Recentgoals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Player Name", "match_minute", "match_result", "Home Team", "Away Team", "stadium_name"
            }
        ));
        jScrollPane1.setViewportView(Recentgoals);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(header1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents
    public int no_of_player() {
        String sqlquery = " select count(*) as no_of_player from player where club_id = 1";
        int no_of_player=0;
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
 
            while (rs.next()) {
             no_of_player=rs.getInt("no_of_player");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return no_of_player;
    }
    
    public int total_salary() {
        String sqlquery ="select sum(salary) as total_salary from player where club_id = 1";
        int total_salary=0;
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
 
            while (rs.next()) {
             total_salary=rs.getInt("total_salary");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return total_salary;
    }
    
        public int Remaining_match() {
        String sqlquery = "select count(*) as Remaining_match from football_match fm, plays_in pin,club c1, club c2 where fm.match_id = pin.match_id AND pin.first_club_id = c1.club_id AND pin.second_club_id = c2.club_id AND (c1.club_name = 'Real Madrid' or c2.club_name = 'Real Madrid') AND match_result is null";
        int Remaing_match=0;
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            while (rs.next()) {
             Remaing_match=rs.getInt("Remaining_match");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return Remaing_match;
    }
    
        public ArrayList<Top_Salary_entity> salarylist() {
        ArrayList<Top_Salary_entity> SalaryList = new ArrayList<>();
        String sqlquery =" select * from top_salary_view";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            Top_Salary_entity top_Salary_entity;
            while (rs.next()) {
                top_Salary_entity = new Top_Salary_entity(rs.getString("Player Name"),rs.getInt("salary"));
                SalaryList.add(top_Salary_entity);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return SalaryList;
    }

    public void show_Top_salary() {
        ArrayList<Top_Salary_entity> list = salarylist();
        DefaultTableModel model = (DefaultTableModel) Topsalary.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getPlayer_Name();
            row[1] = list.get(i).getSalary();
            model.addRow(row);
        }
    }

    public ArrayList<Recent_goal_entity> Recent_goal_list() {
        ArrayList<Recent_goal_entity> Recent_goal_List = new ArrayList<>();
        String sqlquery = "select * from recent_scores where [Home Team] = 'Real Madrid' or [Away Team] = 'Real Madrid'";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            Recent_goal_entity entity;
            while (rs.next()) {
                entity = new Recent_goal_entity(rs.getString("Player Name"), rs.getInt("match_minute"),rs.getString("match_result"),rs.getString("Home Team"),rs.getString("Away Team") ,rs.getString("stadium_name"));
                Recent_goal_List.add(entity);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return Recent_goal_List;
    }

    public void show_Recent_goal(){
        ArrayList<Recent_goal_entity> list = Recent_goal_list();
        DefaultTableModel model = (DefaultTableModel) Recentgoals.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getPlayer_name();
            row[1] = list.get(i).getMatch_minute();
            row[2] = list.get(i).getMatch_result();
            row[3] = list.get(i).getHome_Team();
            row[4] = list.get(i).getAway_Team();
            row[5] = list.get(i).getStadium_name();                       
            model.addRow(row);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Recentgoals;
    private javax.swing.JTable Topsalary;
    private componant.Card card1;
    private componant.Card card2;
    private componant.Card card3;
    private componant.Header header1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
