/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package forms;

import entity.match_entity_league_next;
import entity.match_entity_league_prev;
import entity.match_entity_cup_next;
import entity.match_entity_cup_prev;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.main;
import sqlConnection.SQLcon;

/**
 *
 * @author MOHAMED
 */
public class Matches extends javax.swing.JPanel {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    /**
     * Creates new form Matches
     */
    public Matches() {
         initComponents();
         conn = SQLcon.connecrb();
//        populate_table();
         show_match_entity_cup_next();
         show_match_entity_cup_prev();
         show_match_entity_league_next();
         show_match_entity_league_prev();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jButton_previous = new javax.swing.JButton();
        jButton_next = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_league_next = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_cup_prev = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_league_prev = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_cup_next = new javax.swing.JTable();

        jLabel4.setBackground(new java.awt.Color(5, 117, 230));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Calendar Matches");
        jLabel4.setOpaque(true);

        jButton_previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-previous-100.png"))); // NOI18N
        jButton_previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_previousActionPerformed(evt);
            }
        });

        jButton_next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-next-100.png"))); // NOI18N
        jButton_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_nextActionPerformed(evt);
            }
        });

        jTable_league_next.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "league_name", "league_week", "match_date", "match_result", "Home", "Away"
            }
        ));
        jScrollPane1.setViewportView(jTable_league_next);

        jTable_cup_prev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "cup_name", "cup_round", "match_date", "match_result", "Home", "Away"
            }
        ));
        jScrollPane3.setViewportView(jTable_cup_prev);

        jTable_league_prev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "league_name", "league_week", "match_date", "match_result", "Home", "Away"
            }
        ));
        jScrollPane2.setViewportView(jTable_league_prev);

        jTable_cup_next.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "cup_name", "cup_round", "match_date", "match_result", "Home", "Away"
            }
        ));
        jScrollPane4.setViewportView(jTable_cup_next);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_previous)
                    .addComponent(jButton_next))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jButton_previous)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_next)
                        .addGap(53, 53, 53))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_nextActionPerformed
      
        try {
            show_match_entity_cup_next();
            show_match_entity_league_next();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } // TODO add your handling code here:
    }//GEN-LAST:event_jButton_nextActionPerformed

    private void jButton_previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_previousActionPerformed
             try {
            show_match_entity_cup_prev();
            show_match_entity_league_prev();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton_previousActionPerformed

    public ArrayList<match_entity_league_next> matchlist0() {
        ArrayList<match_entity_league_next> matchlist0 = new ArrayList<>();
        String sqlquery = "select * from league_matches where   ([Home] = 'Real Madrid' or [Away] = 'Real Madrid') AND match_result is null;";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            match_entity_league_next match_entity_league_next;
            while (rs.next()) {
                match_entity_league_next = new match_entity_league_next(rs.getString("league_name"),rs.getInt("league_week"),rs.getString("match_date"),rs.getString("match_result"),rs.getString("Home"),rs.getString("Away"));
                matchlist0.add(match_entity_league_next);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return matchlist0;
    }

    public void show_match_entity_league_next() {
        ArrayList<match_entity_league_next> list = matchlist0();
        DefaultTableModel model = (DefaultTableModel) jTable_league_next.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getLeague_name();
            row[1] = list.get(i).getLeague_week();
            row[2] = list.get(i).getMatch_date();
            row[3] = list.get(i).getMatch_result();
            row[4] = list.get(i).getHome();
            row[5] = list.get(i).getAway();
            model.addRow(row);
        }
    }
    
     public ArrayList<match_entity_league_prev> matchlist1() {
        ArrayList<match_entity_league_prev> matchlist1 = new ArrayList<>();
        String sqlquery = "select * from league_matches where   ([Home] = 'Real Madrid' or [Away] = 'Real Madrid') AND match_result is not null";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            match_entity_league_prev match_entity_league_prev;
            while (rs.next()) {
                match_entity_league_prev = new match_entity_league_prev(rs.getString("league_name"),rs.getInt("league_week"),rs.getString("match_date"),rs.getString("match_result"),rs.getString("Home"),rs.getString("Away"));
                matchlist1.add(match_entity_league_prev);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return matchlist1;
    }

    public void show_match_entity_league_prev() {
        ArrayList<match_entity_league_prev> list = matchlist1();
        DefaultTableModel model = (DefaultTableModel) jTable_league_prev.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getLeague_name();
            row[1] = list.get(i).getLeague_week();
            row[2] = list.get(i).getMatch_date();
            row[3] = list.get(i).getMatch_result();
            row[4] = list.get(i).getHome();
            row[5] = list.get(i).getAway();
            model.addRow(row);
        }
    }
    
     public ArrayList<match_entity_cup_next> matchlist2() {
        ArrayList<match_entity_cup_next> matchlist2 = new ArrayList<>();
        String sqlquery = "select * from cup_matches where   ([Home] = 'Real Madrid' or [Away] = 'Real Madrid') AND match_result is null";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            match_entity_cup_next match_entity_cup_next;
            while (rs.next()) {
                match_entity_cup_next = new match_entity_cup_next(rs.getString("cup_name"),rs.getString("cup_round"),rs.getString("match_date"),rs.getString("match_result"),rs.getString("Home"),rs.getString("Away"));
                matchlist2.add(match_entity_cup_next);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return matchlist2;
    }

    public void show_match_entity_cup_next() {
        ArrayList<match_entity_cup_next> list = matchlist2();
        DefaultTableModel model = (DefaultTableModel) jTable_cup_next.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getCup_name();
            row[1] = list.get(i).getCup_round();
            row[2] = list.get(i).getMatch_date();
            row[3] = list.get(i).getMatch_result();
            row[4] = list.get(i).getHome();
            row[5] = list.get(i).getAway();
            model.addRow(row);
        }
    }
    
       public ArrayList<match_entity_cup_prev> matchlist3() {
       ArrayList<match_entity_cup_prev> matchlist3 = new ArrayList<>();
        String sqlquery = "select * from cup_matches where   ([Home] = 'Real Madrid' or [Away] = 'Real Madrid') AND match_result is not null";
        try {
            Statement st = conn.createStatement();
            rs = st.executeQuery(sqlquery);
            match_entity_cup_prev match_entity_cup_prev;
            while (rs.next()) {
                match_entity_cup_prev = new match_entity_cup_prev(rs.getString("cup_name"),rs.getString("cup_round"),rs.getString("match_date"),rs.getString("match_result"),rs.getString("Home"),rs.getString("Away"));
                matchlist3.add(match_entity_cup_prev);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return matchlist3;
    }

    public void show_match_entity_cup_prev() {
        ArrayList<match_entity_cup_prev> list = matchlist3();
        DefaultTableModel model = (DefaultTableModel) jTable_cup_prev.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getCup_name();
            row[1] = list.get(i).getCup_round();
            row[2] = list.get(i).getMatch_date();
            row[3] = list.get(i).getMatch_result();
            row[4] = list.get(i).getHome();
            row[5] = list.get(i).getAway();
            model.addRow(row);
        }
    }
    
//     public ArrayList<match_entity_league> matchlist() {
//        ArrayList<match_entity_league> matchlist = new ArrayList<>();
//        String sqlquery = "select * from league_matches where   ([Home] = 'Real Madrid' or [Away] = 'Real Madrid') AND match_result is null;";
//        try {
//            Statement st = conn.createStatement();
//            rs = st.executeQuery(sqlquery);
//            match_entity_league match_entity_league;
//            while (rs.next()) {
//                match_entity_league = new match_entity_league(rs.getString("league_name"),rs.getInt("league_week"),rs.getString("match_date"),rs.getString("match_result"),rs.getString("Home"),rs.getString("Away"));
//                matchlist.add(match_entity_league);
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//        return matchlist;
//    }
//
//    public void show_match_entity_league() {
//        ArrayList<match_entity_league> list = matchlist();
//        DefaultTableModel model = (DefaultTableModel) jTable_league_next.getModel();
//        model.setRowCount(0);
//        Object[] row = new Object[6];
//        for (int i = 0; i < list.size(); i++) {
//            row[0] = list.get(i).getLeague_name();
//            row[0] = list.get(i).getLeague_week();
//            row[0] = list.get(i).getMatch_date();
//            row[0] = list.get(i).getMatch_result();
//            row[0] = list.get(i).getHome();
//            row[0] = list.get(i).getAway();
//            model.addRow(row);
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_next;
    private javax.swing.JButton jButton_previous;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable_cup_next;
    private javax.swing.JTable jTable_cup_prev;
    private javax.swing.JTable jTable_league_next;
    private javax.swing.JTable jTable_league_prev;
    // End of variables declaration//GEN-END:variables
}
